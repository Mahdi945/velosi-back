# Test de cr√©ation d'opportunit√© avec les nouveaux champs
# V√©rifie que transport_type, traffic et engine_type sont bien sauvegard√©s

$API_BASE = "http://localhost:3000/api"
$headers = @{
    "Content-Type" = "application/json"
    "Authorization" = "Bearer test-token"
    "x-user-id" = "1"
}

Write-Host "üß™ TEST: Cr√©ation d'opportunit√© avec nouveaux champs" -ForegroundColor Cyan

# Donn√©es de test avec les nouveaux champs
$opportunityData = @{
    title = "Test Opportunit√© - Nouveaux Champs"
    description = "Test pour v√©rifier la sauvegarde des champs transport_type, traffic et engine_type"
    value = 15000
    probability = 75
    stage = "qualification"
    expectedCloseDate = "2025-12-15"
    originAddress = "Port de Rad√®s, Tunis"
    destinationAddress = "Port de Marseille, France"
    transportType = "complet"
    traffic = "export"
    serviceFrequency = "monthly"
    engineType = 1  # ID d'un engin (si existe dans la table engin)
    specialRequirements = "Conteneur r√©frig√©r√© requis"
    assignedToId = 3
    priority = "high"
    source = "manual_test"
    tags = @("test", "nouveaux-champs")
} | ConvertTo-Json

Write-Host "üìù Donn√©es √† envoyer:" -ForegroundColor Yellow
Write-Host $opportunityData -ForegroundColor Gray

try {
    # Cr√©er l'opportunit√©
    Write-Host "`nüîÑ Envoi de la requ√™te de cr√©ation..." -ForegroundColor Yellow
    $response = Invoke-RestMethod -Uri "$API_BASE/crm/opportunities" -Method Post -Body $opportunityData -Headers $headers
    
    Write-Host "‚úÖ Opportunit√© cr√©√©e avec succ√®s!" -ForegroundColor Green
    Write-Host "ID: $($response.id)" -ForegroundColor Green
    
    # R√©cup√©rer l'opportunit√© cr√©√©e pour v√©rifier les champs
    Write-Host "`nüîç R√©cup√©ration de l'opportunit√© cr√©√©e..." -ForegroundColor Yellow
    $getResponse = Invoke-RestMethod -Uri "$API_BASE/crm/opportunities/$($response.id)" -Method Get -Headers $headers
    
    Write-Host "üìã Opportunit√© r√©cup√©r√©e:" -ForegroundColor Cyan
    Write-Host "- ID: $($getResponse.id)" -ForegroundColor White
    Write-Host "- Titre: $($getResponse.title)" -ForegroundColor White
    Write-Host "- Type de transport: $($getResponse.transportType)" -ForegroundColor $(if ($getResponse.transportType -eq "complet") {"Green"} else {"Red"})
    Write-Host "- Traffic: $($getResponse.traffic)" -ForegroundColor $(if ($getResponse.traffic -eq "export") {"Green"} else {"Red"})
    Write-Host "- Type d'engin: $($getResponse.engineType)" -ForegroundColor $(if ($getResponse.engineType -eq 1) {"Green"} else {"Red"})
    Write-Host "- Probabilit√©: $($getResponse.probability)%" -ForegroundColor White
    Write-Host "- Assign√© √†: $($getResponse.assignedToId)" -ForegroundColor White
    
    # V√©rifications
    $success = $true
    
    if ($getResponse.transportType -ne "complet") {
        Write-Host "‚ùå ERREUR: transportType non sauvegard√© correctement" -ForegroundColor Red
        Write-Host "   Attendu: 'complet', Re√ßu: '$($getResponse.transportType)'" -ForegroundColor Red
        $success = $false
    }
    
    if ($getResponse.traffic -ne "export") {
        Write-Host "‚ùå ERREUR: traffic non sauvegard√© correctement" -ForegroundColor Red
        Write-Host "   Attendu: 'export', Re√ßu: '$($getResponse.traffic)'" -ForegroundColor Red
        $success = $false
    }
    
    if ($getResponse.engineType -ne 1) {
        Write-Host "‚ùå ERREUR: engineType non sauvegard√© correctement" -ForegroundColor Red
        Write-Host "   Attendu: 1, Re√ßu: '$($getResponse.engineType)'" -ForegroundColor Red
        $success = $false
    }
    
    if ($success) {
        Write-Host "`n‚úÖ SUCC√àS: Tous les champs ont √©t√© sauvegard√©s correctement!" -ForegroundColor Green
    } else {
        Write-Host "`n‚ùå √âCHEC: Certains champs n'ont pas √©t√© sauvegard√©s correctement" -ForegroundColor Red
    }
    
    # Test de conversion de prospect vers opportunit√©
    Write-Host "`nüß™ TEST: Conversion prospect vers opportunit√©" -ForegroundColor Cyan
    
    # R√©cup√©rer un prospect pour le convertir
    $leadsResponse = Invoke-RestMethod -Uri "$API_BASE/crm/leads?limit=1" -Method Get -Headers $headers
    
    if ($leadsResponse.data.Count -gt 0) {
        $leadId = $leadsResponse.data[0].id
        Write-Host "üìã Conversion du prospect ID: $leadId" -ForegroundColor Yellow
        
        $conversionData = @{
            opportunityTitle = "Conversion Test - Nouveaux Champs"
            opportunityDescription = "Test de conversion avec les nouveaux champs"
            opportunityValue = 25000
            probability = 50
            expectedCloseDate = "2025-11-30"
            transportType = "groupage"
            traffic = "import"
            engineType = 2
            specialRequirements = "Transport urgent requis"
        } | ConvertTo-Json
        
        $conversionResponse = Invoke-RestMethod -Uri "$API_BASE/crm/opportunities/convert-from-lead/$leadId" -Method Post -Body $conversionData -Headers $headers
        
        Write-Host "‚úÖ Conversion r√©ussie! ID opportunit√©: $($conversionResponse.id)" -ForegroundColor Green
        
        # V√©rifier l'opportunit√© convertie
        $convertedOpp = Invoke-RestMethod -Uri "$API_BASE/crm/opportunities/$($conversionResponse.id)" -Method Get -Headers $headers
        
        Write-Host "üìã Opportunit√© convertie:" -ForegroundColor Cyan
        Write-Host "- Type de transport: $($convertedOpp.transportType)" -ForegroundColor $(if ($convertedOpp.transportType -eq "groupage") {"Green"} else {"Red"})
        Write-Host "- Traffic: $($convertedOpp.traffic)" -ForegroundColor $(if ($convertedOpp.traffic -eq "import") {"Green"} else {"Red"})
        Write-Host "- Type d'engin: $($convertedOpp.engineType)" -ForegroundColor $(if ($convertedOpp.engineType -eq 2) {"Green"} else {"Red"})
        
    } else {
        Write-Host "‚ö†Ô∏è  Aucun prospect trouv√© pour tester la conversion" -ForegroundColor Yellow
    }
    
} catch {
    Write-Host "‚ùå ERREUR lors du test:" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
    
    if ($_.Exception.Response) {
        $reader = New-Object System.IO.StreamReader($_.Exception.Response.GetResponseStream())
        $responseBody = $reader.ReadToEnd()
        Write-Host "D√©tails de l'erreur: $responseBody" -ForegroundColor Red
    }
}

Write-Host "`nüèÅ Test termin√©" -ForegroundColor Magenta