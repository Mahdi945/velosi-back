import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  Query,
  Request,
  UseGuards,
} from '@nestjs/common';
import { OpportunityService } from '../../services/crm/opportunity.service';
import {
  CreateOpportunityDto,
  UpdateOpportunityDto,
  OpportunityQueryDto,
  ConvertLeadToOpportunityDto,
} from '../../dto/crm/opportunity.dto';
import { JwtAuthGuard } from '../../auth/jwt-auth.guard';
import { RolesGuard } from '../../auth/roles.guard';
import { Roles } from '../../auth/roles.decorator';

@Controller('crm/opportunities')
// @UseGuards(JwtAuthGuard, RolesGuard) // Temporairement d√©sactiv√© pour debug
export class OpportunityController {
  constructor(private readonly opportunityService: OpportunityService) {}

  /**
   * Cr√©er une nouvelle opportunit√©
   * POST /api/crm/opportunities
   */
  @Post()
  // @Roles('commercial', 'admin') // Temporairement d√©sactiv√© pour debug
  async create(@Body() rawBody: any, @Request() req) {
    console.log('üîç DEBUG CREATE - Donn√©es brutes re√ßues:', JSON.stringify(rawBody, null, 2));
    
    // Transformer engineTypes (array) en engineType (single) si n√©cessaire
    const createOpportunityDto = { ...rawBody };
    
    // Traiter le nouveau format engineTypes (array)
    if (rawBody.engineTypes && Array.isArray(rawBody.engineTypes) && rawBody.engineTypes.length > 0 && !rawBody.engineType) {
      const firstEngineId = rawBody.engineTypes[0];
      const parsedEngineType = parseInt(firstEngineId, 10);
      if (!isNaN(parsedEngineType) && parsedEngineType > 0) {
        createOpportunityDto.engineType = parsedEngineType;
        console.log('üîÑ CREATE - Conversion engineTypes -> engineType:', firstEngineId, '->', parsedEngineType);
      }
      // Supprimer engineTypes pour √©viter confusion
      delete createOpportunityDto.engineTypes;
    }
    
    // Compatibilit√© avec l'ancien format vehicleTypes
    if (rawBody.vehicleTypes && Array.isArray(rawBody.vehicleTypes) && rawBody.vehicleTypes.length > 0 && !rawBody.engineType) {
      const firstVehicleType = rawBody.vehicleTypes[0];
      const parsedEngineType = parseInt(firstVehicleType, 10);
      if (!isNaN(parsedEngineType) && parsedEngineType > 0) {
        createOpportunityDto.engineType = parsedEngineType;
        console.log('üîÑ CREATE - Conversion vehicleTypes -> engineType:', firstVehicleType, '->', parsedEngineType);
      }
      // Supprimer vehicleTypes pour √©viter confusion
      delete createOpportunityDto.vehicleTypes;
    }
    
    console.log('üîç DEBUG CREATE - Donn√©es apr√®s transformation:', JSON.stringify(createOpportunityDto, null, 2));
    try {
      // Priorit√© : utilisateur authentifi√© > header personnalis√© > d√©faut
      let userId = 1; // ID par d√©faut (administratif)
      
      if (req.user && req.user.id) {
        userId = req.user.id;
        console.log('üë§ Utilisateur authentifi√© pour cr√©ation opportunit√©:', { 
          id: userId, 
          username: req.user.username, 
          role: req.user.role 
        });
      } else if (req.headers['x-user-id']) {
        const headerUserId = parseInt(req.headers['x-user-id'] as string, 10);
        if (!isNaN(headerUserId) && headerUserId > 0) {
          userId = headerUserId;
          console.log('üë§ Utilisateur via header pour cr√©ation opportunit√©:', { id: userId });
        }
      } else {
        console.warn('‚ö†Ô∏è Pas d\'utilisateur identifi√© pour cr√©ation opportunit√©, utilisation de l\'ID par d√©faut:', userId);
      }
      
      const opportunity = await this.opportunityService.create(createOpportunityDto, userId);
      return {
        success: true,
        message: 'Opportunit√© cr√©√©e avec succ√®s',
        data: opportunity,
      };
    } catch (error) {
      return {
        success: false,
        message: error.message,
        error: error.name,
      };
    }
  }

  /**
   * üìã Obtenir toutes les opportunit√©s ARCHIV√âES avec filtres
   * GET /api/crm/opportunities/archived
   * ‚úÖ NOUVELLE ROUTE: Retourne uniquement les archiv√©es
   * ‚ö†Ô∏è IMPORTANT: Doit √™tre AVANT @Get(':id') pour √©viter la confusion avec les param√®tres de route
   */
  @Get('archived')
  async findAllArchived(@Query() query: OpportunityQueryDto) {
    try {
      const result = await this.opportunityService.findAllArchived(query);
      return {
        success: true,
        message: 'Opportunit√©s archiv√©es r√©cup√©r√©es avec succ√®s',
        data: result.data,
        total: result.total,
        totalPages: result.totalPages,
        currentPage: query.page || 1,
        pageSize: query.limit || 25,
      };
    } catch (error) {
      return {
        success: false,
        message: error.message,
        error: error.name,
      };
    }
  }

  /**
   * Obtenir toutes les opportunit√©s NON-ARCHIV√âES avec filtres
   * GET /api/crm/opportunities
   * ‚úÖ CORRECTION: Retourne uniquement les NON-archiv√©es
   */
  @Get()
  async findAll(@Query() query: OpportunityQueryDto) {
    try {
      const result = await this.opportunityService.findAll(query);
      return {
        success: true,
        message: 'Opportunit√©s r√©cup√©r√©es avec succ√®s',
        data: result.data,
        total: result.total,
        totalPages: result.totalPages,
        currentPage: query.page || 1,
        pageSize: query.limit || 25,
      };
    } catch (error) {
      return {
        success: false,
        message: error.message,
        error: error.name,
      };
    }
  }

  /**
   * Obtenir une opportunit√© par ID
   * GET /api/crm/opportunities/:id
   */
  @Get(':id')
  async findOne(@Param('id') id: string) {
    try {
      const opportunity = await this.opportunityService.findOne(+id);
      return {
        success: true,
        message: 'Opportunit√© r√©cup√©r√©e avec succ√®s',
        data: opportunity,
      };
    } catch (error) {
      return {
        success: false,
        message: error.message,
        error: error.name,
      };
    }
  }

  /**
   * Mettre √† jour une opportunit√©
   * PATCH /api/crm/opportunities/:id
   */
  @Patch(':id')
  // @Roles('commercial', 'admin') // Temporairement d√©sactiv√© pour debug
  async update(
    @Param('id') id: string,
    @Body() rawBody: any, // Accepter d'abord les donn√©es brutes
    @Request() req,
  ) {
    console.log('üîç DEBUG UPDATE - Opportunity ID:', id);
    console.log('üîç DEBUG UPDATE - Donn√©es brutes re√ßues:', JSON.stringify(rawBody, null, 2));
    
    // Transformer engineTypes (array) en engineType (single) si n√©cessaire
    const updateOpportunityDto = { ...rawBody };
    
    // Traiter le nouveau format engineTypes (array)
    if (rawBody.engineTypes && Array.isArray(rawBody.engineTypes) && rawBody.engineTypes.length > 0 && !rawBody.engineType) {
      const firstEngineId = rawBody.engineTypes[0];
      const parsedEngineType = parseInt(firstEngineId, 10);
      if (!isNaN(parsedEngineType) && parsedEngineType > 0) {
        updateOpportunityDto.engineType = parsedEngineType;
        console.log('üîÑ UPDATE - Conversion engineTypes -> engineType:', firstEngineId, '->', parsedEngineType);
      }
      // Supprimer engineTypes pour √©viter confusion
      delete updateOpportunityDto.engineTypes;
    }
    
    // Compatibilit√© avec l'ancien format vehicleTypes
    if (rawBody.vehicleTypes && Array.isArray(rawBody.vehicleTypes) && rawBody.vehicleTypes.length > 0 && !rawBody.engineType) {
      const firstVehicleType = rawBody.vehicleTypes[0];
      const parsedEngineType = parseInt(firstVehicleType, 10);
      if (!isNaN(parsedEngineType) && parsedEngineType > 0) {
        updateOpportunityDto.engineType = parsedEngineType;
        console.log('üîÑ UPDATE - Conversion vehicleTypes -> engineType:', firstVehicleType, '->', parsedEngineType);
      }
      // Supprimer vehicleTypes pour √©viter confusion
      delete updateOpportunityDto.vehicleTypes;
    }
    
    console.log('üîç DEBUG UPDATE - Donn√©es apr√®s transformation:', JSON.stringify(updateOpportunityDto, null, 2));
    try {
      console.log('üîÑ [CONTROLLER UPDATE] Mise √† jour opportunit√© ID:', id);
      console.log('üìù [CONTROLLER UPDATE] Donn√©es re√ßues:', updateOpportunityDto);
      console.log('üéØ [CONTROLLER UPDATE] AssignedToId re√ßu:', updateOpportunityDto.assignedToId, 'type:', typeof updateOpportunityDto.assignedToId);
      console.log('üë§ [CONTROLLER UPDATE] Utilisateur dans req:', req.user);
      
      // Priorit√© : utilisateur authentifi√© > header personnalis√© > d√©faut
      let userId = 1; // ID par d√©faut (administratif)
      let userInfo = 'Utilisateur par d√©faut (ID: 1)';
      
      if (req.user && req.user.id) {
        userId = req.user.id;
        userInfo = `${req.user.username || 'N/A'} (ID: ${userId}, R√¥le: ${req.user.role || 'N/A'})`;
        console.log('üë§ Utilisateur authentifi√© pour mise √† jour opportunit√©:', { 
          id: userId, 
          username: req.user.username, 
          role: req.user.role 
        });
      } else if (req.headers['x-user-id']) {
        // Header personnalis√© pour l'ID utilisateur
        const headerUserId = parseInt(req.headers['x-user-id'] as string, 10);
        if (!isNaN(headerUserId) && headerUserId > 0) {
          userId = headerUserId;
          userInfo = `Via header (ID: ${userId})`;
          console.log('üë§ Utilisateur via header pour mise √† jour opportunit√©:', { id: userId });
        }
      } else {
        console.warn('‚ö†Ô∏è Pas d\'utilisateur identifi√© pour mise √† jour opportunit√©, utilisation de l\'ID par d√©faut:', userId);
      }
      
      const opportunity = await this.opportunityService.update(+id, updateOpportunityDto, userId);
      return {
        success: true,
        message: 'Opportunit√© mise √† jour avec succ√®s',
        data: opportunity,
      };
    } catch (error) {
      return {
        success: false,
        message: error.message,
        error: error.name,
      };
    }
  }

  /**
   * Supprimer une opportunit√©
   * DELETE /api/crm/opportunities/:id
   */
  @Delete(':id')
  @Roles('admin')
  async remove(@Param('id') id: string) {
    try {
      await this.opportunityService.remove(+id);
      return {
        success: true,
        message: 'Opportunit√© supprim√©e avec succ√®s',
      };
    } catch (error) {
      return {
        success: false,
        message: error.message,
        error: error.name,
      };
    }
  }

  /**
   * Convertir un prospect en opportunit√©
   * POST /api/crm/opportunities/convert-from-lead/:leadId
   */
  @Post('convert-from-lead/:leadId')
  // @Roles('commercial', 'admin') // Temporairement d√©sactiv√© pour debug
  async convertFromLead(
    @Param('leadId') leadId: string,
    @Body() rawBody: any, // Accepter d'abord les donn√©es brutes
    @Request() req,
  ) {
    try {
      console.log('üîç DEBUG CONVERSION - Lead ID:', leadId);
      console.log('üîç DEBUG CONVERSION - Donn√©es brutes re√ßues:', JSON.stringify(rawBody, null, 2));
      
      // Transformer engineTypes (array) en engineType (single) si n√©cessaire
      const convertDto = { ...rawBody };
      
      // Traiter le nouveau format engineTypes (array)
      if (rawBody.engineTypes && Array.isArray(rawBody.engineTypes) && rawBody.engineTypes.length > 0 && !rawBody.engineType) {
        const firstEngineId = rawBody.engineTypes[0];
        const parsedEngineType = parseInt(firstEngineId, 10);
        if (!isNaN(parsedEngineType) && parsedEngineType > 0) {
          convertDto.engineType = parsedEngineType;
          console.log('üîÑ CONVERT - Conversion engineTypes -> engineType:', firstEngineId, '->', parsedEngineType);
        }
        // Supprimer engineTypes pour √©viter confusion
        delete convertDto.engineTypes;
      }
      
      // Compatibilit√© avec l'ancien format vehicleTypes
      if (rawBody.vehicleTypes && Array.isArray(rawBody.vehicleTypes) && rawBody.vehicleTypes.length > 0 && !rawBody.engineType) {
        const firstVehicleType = rawBody.vehicleTypes[0];
        const parsedEngineType = parseInt(firstVehicleType, 10);
        if (!isNaN(parsedEngineType) && parsedEngineType > 0) {
          convertDto.engineType = parsedEngineType;
          console.log('üîÑ CONVERT - Conversion vehicleTypes -> engineType:', firstVehicleType, '->', parsedEngineType);
        }
        // Supprimer vehicleTypes pour √©viter confusion
        delete convertDto.vehicleTypes;
      }
      
      console.log('üîç DEBUG CONVERSION - Donn√©es apr√®s transformation:', JSON.stringify(convertDto, null, 2));
      // Priorit√© : utilisateur authentifi√© > header personnalis√© > d√©faut
      let userId = 1; // ID par d√©faut (administratif)
      let userInfo = 'Utilisateur par d√©faut (ID: 1)';
      
      if (req.user && req.user.id) {
        // Utilisateur authentifi√© via JWT
        userId = req.user.id;
        userInfo = `${req.user.username || 'N/A'} (ID: ${userId}, R√¥le: ${req.user.role || 'N/A'})`;
        console.log('üë§ Utilisateur authentifi√© pour conversion:', { 
          id: userId, 
          username: req.user.username, 
          role: req.user.role 
        });
      } else if (req.headers['x-user-id']) {
        // Header personnalis√© pour l'ID utilisateur
        const headerUserId = parseInt(req.headers['x-user-id'] as string, 10);
        if (!isNaN(headerUserId) && headerUserId > 0) {
          userId = headerUserId;
          userInfo = `Via header (ID: ${userId})`;
          console.log('üë§ Utilisateur via header pour conversion:', { id: userId });
        }
      } else {
        console.warn('‚ö†Ô∏è Pas d\'utilisateur identifi√©, utilisation de l\'ID par d√©faut:', userId);
      }
      
      const opportunity = await this.opportunityService.convertFromLead(+leadId, convertDto, userId);
      return {
        success: true,
        message: 'Prospect converti en opportunit√© avec succ√®s',
        data: opportunity,
      };
    } catch (error) {
      return {
        success: false,
        message: error.message,
        error: error.name,
      };
    }
  }

  /**
   * Obtenir les statistiques des opportunit√©s
   * GET /api/crm/opportunities/stats
   */
  @Get('stats/summary')
  async getStats(@Query('userId') userId?: string, @Request() req?) {
    try {
      // Utiliser l'ID fourni ou celui de l'utilisateur authentifi√©
      const targetUserId = userId ? +userId : (req.user?.id || null);
      const stats = await this.opportunityService.getStats(targetUserId);
      return {
        success: true,
        message: 'Statistiques r√©cup√©r√©es avec succ√®s',
        data: stats,
      };
    } catch (error) {
      return {
        success: false,
        message: error.message,
        error: error.name,
      };
    }
  }

  /**
   * Changer le stage d'une opportunit√©
   * PATCH /api/crm/opportunities/:id/stage
   */
  @Patch(':id/stage')
  @Roles('commercial', 'admin')
  async changeStage(
    @Param('id') id: string,
    @Body() body: { stage: string; wonDescription?: string; lostReason?: string; lostToCompetitor?: string },
    @Request() req,
  ) {
    try {
      // V√©rifier que l'utilisateur est authentifi√©
      if (!req.user || !req.user.id) {
        return {
          success: false,
          message: 'Utilisateur non authentifi√©',
          error: 'UNAUTHORIZED',
        };
      }
      
      const updateData: UpdateOpportunityDto = { stage: body.stage as any };
      
      if (body.wonDescription) {
        updateData.wonDescription = body.wonDescription;
      }
      
      if (body.lostReason) {
        updateData.lostReason = body.lostReason;
      }
      
      if (body.lostToCompetitor) {
        updateData.lostToCompetitor = body.lostToCompetitor;
      }

      const opportunity = await this.opportunityService.update(+id, updateData, req.user.id);
      return {
        success: true,
        message: 'Stage de l\'opportunit√© mis √† jour avec succ√®s',
        data: opportunity,
      };
    } catch (error) {
      return {
        success: false,
        message: error.message,
        error: error.name,
      };
    }
  }

  /**
   * Obtenir les opportunit√©s par stage (pour kanban)
   * GET /api/crm/opportunities/by-stage
   */
  @Get('by-stage/all')
  async getByStage(@Query('assignedToId') assignedToId?: string) {
    try {
      const stages = ['prospecting', 'qualification', 'needs_analysis', 'proposal', 'negotiation'];
      const result = {};

      for (const stage of stages) {
        const query: OpportunityQueryDto = { stage: stage as any };
        if (assignedToId) {
          query.assignedToId = +assignedToId;
        }
        const stageData = await this.opportunityService.findAll(query);
        result[stage] = stageData.data;
      }

      return {
        success: true,
        message: 'Opportunit√©s par stage r√©cup√©r√©es avec succ√®s',
        data: result,
      };
    } catch (error) {
      return {
        success: false,
        message: error.message,
        error: error.name,
      };
    }
  }
}