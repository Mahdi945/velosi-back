import { Controller, Get, Query, UseGuards, Req } from '@nestjs/common';
import { DashboardService } from '../services/dashboard.service';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';
import { RolesGuard } from '../auth/roles.guard';
import { Roles } from '../auth/roles.decorator';
import { Request } from 'express';

@Controller('dashboard')
@UseGuards(JwtAuthGuard, RolesGuard)
export class DashboardController {
  constructor(private readonly dashboardService: DashboardService) {}

  /**
   * Obtenir les statistiques globales du dashboard
   * Acc√®s: Administratif uniquement
   */
  @Get('stats')
  @Roles('administratif')
  async getDashboardStats(
    @Query('startDate') startDate?: string,
    @Query('endDate') endDate?: string,
    @Query('transportType') transportType?: string,
    @Query('trafficType') trafficType?: string,
  ) {
    try {
      const filters: any = {};
      if (startDate) filters.startDate = new Date(startDate);
      if (endDate) filters.endDate = new Date(endDate);
      if (transportType) filters.transportType = transportType;
      if (trafficType) filters.trafficType = trafficType;
      
      const stats = await this.dashboardService.getDashboardStats(
        Object.keys(filters).length > 0 ? filters : undefined
      );
      return {
        success: true,
        data: stats,
        message: 'Statistiques du dashboard r√©cup√©r√©es avec succ√®s'
      };
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des statistiques du dashboard:', error);
      return {
        success: false,
        data: null,
        message: 'Erreur lors de la r√©cup√©ration des statistiques'
      };
    }
  }

  /**
   * Obtenir l'√©volution des ventes sur 12 mois
   * Acc√®s: Administratif et Commercial
   */
  @Get('sales-evolution')
  @Roles('administratif', 'commercial')
  async getSalesEvolution(
    @Query('startDate') startDate?: string,
    @Query('endDate') endDate?: string,
    @Query('transportType') transportType?: string,
    @Query('trafficType') trafficType?: string,
  ) {
    try {
      const filters: any = {};
      if (startDate) filters.startDate = new Date(startDate);
      if (endDate) filters.endDate = new Date(endDate);
      if (transportType) filters.transportType = transportType;
      if (trafficType) filters.trafficType = trafficType;
      
      const evolution = await this.dashboardService.getSalesEvolution(
        Object.keys(filters).length > 0 ? filters : undefined
      );
      return {
        success: true,
        data: evolution,
        message: '√âvolution des ventes r√©cup√©r√©e avec succ√®s'
      };
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de l\'√©volution des ventes:', error);
      return {
        success: false,
        data: null,
        message: 'Erreur lors de la r√©cup√©ration de l\'√©volution'
      };
    }
  }

  /**
   * Obtenir les statistiques CRM d√©taill√©es
   * Acc√®s: Administratif et Commercial
   */
  @Get('crm-stats')
  @Roles('administratif', 'commercial')
  async getCRMStats(
    @Query('startDate') startDate?: string,
    @Query('endDate') endDate?: string,
    @Query('transportType') transportType?: string,
    @Query('trafficType') trafficType?: string,
  ) {
    try {
      const filters: any = {};
      if (startDate) filters.startDate = new Date(startDate);
      if (endDate) filters.endDate = new Date(endDate);
      if (transportType) filters.transportType = transportType;
      if (trafficType) filters.trafficType = trafficType;
      
      const stats = await this.dashboardService.getCRMStats(
        Object.keys(filters).length > 0 ? filters : undefined
      );
      return {
        success: true,
        data: stats,
        message: 'Statistiques CRM r√©cup√©r√©es avec succ√®s'
      };
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des statistiques CRM:', error);
      return {
        success: false,
        data: null,
        message: 'Erreur lors de la r√©cup√©ration des statistiques CRM'
      };
    }
  }

  /**
   * Obtenir les activit√©s r√©centes
   * Acc√®s: Tous les utilisateurs authentifi√©s
   */
  @Get('recent-activities')
  async getRecentActivities(
    @Query('limit') limit?: string,
    @Query('startDate') startDate?: string,
    @Query('endDate') endDate?: string,
    @Query('transportType') transportType?: string,
    @Query('trafficType') trafficType?: string,
  ) {
    try {
      const limitNumber = limit ? parseInt(limit, 10) : 10;
      const filters: any = {};
      if (startDate) filters.startDate = new Date(startDate);
      if (endDate) filters.endDate = new Date(endDate);
      if (transportType) filters.transportType = transportType;
      if (trafficType) filters.trafficType = trafficType;
      
      const activities = await this.dashboardService.getRecentActivities(
        limitNumber,
        Object.keys(filters).length > 0 ? filters : undefined
      );
      return {
        success: true,
        data: activities,
        message: 'Activit√©s r√©centes r√©cup√©r√©es avec succ√®s'
      };
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des activit√©s r√©centes:', error);
      return {
        success: false,
        data: [],
        message: 'Erreur lors de la r√©cup√©ration des activit√©s'
      };
    }
  }

  /**
   * Obtenir la r√©partition par type de transport (sp√©cifique Velosi)
   * Acc√®s: Administratif et Commercial
   */
  @Get('transport-distribution')
  @Roles('administratif', 'commercial')
  async getTransportDistribution(
    @Query('startDate') startDate?: string,
    @Query('endDate') endDate?: string,
    @Query('transportType') transportType?: string,
    @Query('trafficType') trafficType?: string,
  ) {
    try {
      const filters: any = {};
      if (startDate) filters.startDate = new Date(startDate);
      if (endDate) filters.endDate = new Date(endDate);
      if (transportType) filters.transportType = transportType;
      if (trafficType) filters.trafficType = trafficType;
      
      const distribution = await this.dashboardService.getTransportDistribution(
        Object.keys(filters).length > 0 ? filters : undefined
      );
      return {
        success: true,
        data: distribution,
        message: 'R√©partition par transport r√©cup√©r√©e avec succ√®s'
      };
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de la r√©partition transport:', error);
      return {
        success: false,
        data: null,
        message: 'Erreur lors de la r√©cup√©ration de la r√©partition'
      };
    }
  }

  /**
   * Obtenir les statistiques Import/Export bas√©es sur les cotations
   * Acc√®s: Administratif uniquement
   */
  @Get('import-export-stats')
  @Roles('administratif')
  async getImportExportStats(
    @Query('startDate') startDate?: string,
    @Query('endDate') endDate?: string,
  ) {
    try {
      const filters: any = {};
      if (startDate) filters.startDate = new Date(startDate);
      if (endDate) filters.endDate = new Date(endDate);
      
      const stats = await this.dashboardService.getImportExportStats(
        Object.keys(filters).length > 0 ? filters : undefined
      );
      return {
        success: true,
        data: stats,
        message: 'Statistiques Import/Export r√©cup√©r√©es avec succ√®s'
      };
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des statistiques Import/Export:', error);
      return {
        success: false,
        data: null,
        message: 'Erreur lors de la r√©cup√©ration des statistiques Import/Export'
      };
    }
  }

  /**
   * Obtenir les statistiques personnalis√©es du commercial connect√©
   * Acc√®s: Commercial uniquement
   */
  @Get('commercial/stats')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles('commercial')
  async getCommercialStats(@Req() req: Request) {
    try {
      console.log('üìä [commercial/stats] Requ√™te re√ßue');
      console.log('üë§ [commercial/stats] User:', (req as any).user);
      
      const userId = (req as any).user?.id || (req as any).user?.userId;
      if (!userId) {
        console.error('‚ùå [commercial/stats] Aucun userId trouv√©');
        return {
          success: false,
          data: null,
          message: 'Utilisateur non identifi√©'
        };
      }
      
      console.log('‚úÖ [commercial/stats] userId:', userId);
      const stats = await this.dashboardService.getCommercialStats(userId);
      return {
        success: true,
        data: stats,
        message: 'Statistiques commerciales r√©cup√©r√©es avec succ√®s'
      };
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des statistiques commerciales:', error);
      return {
        success: false,
        data: null,
        message: 'Erreur lors de la r√©cup√©ration des statistiques commerciales'
      };
    }
  }

  /**
   * Obtenir la performance mensuelle du commercial
   * Acc√®s: Commercial uniquement
   */
  @Get('commercial/performance')
  @UseGuards(JwtAuthGuard, RolesGuard)
  @Roles('commercial')
  async getCommercialPerformance(
    @Req() req: Request,
    @Query('startDate') startDate?: string,
    @Query('endDate') endDate?: string,
  ) {
    try {
      console.log('üìä [commercial/performance] Requ√™te re√ßue');
      console.log('üë§ [commercial/performance] User:', (req as any).user);
      
      const userId = (req as any).user?.id || (req as any).user?.userId;
      if (!userId) {
        console.error('‚ùå [commercial/performance] Aucun userId trouv√©');
        return {
          success: false,
          data: null,
          message: 'Utilisateur non identifi√©'
        };
      }
      
      console.log('‚úÖ [commercial/performance] userId:', userId);
      const filters: any = {};
      if (startDate) filters.startDate = new Date(startDate);
      if (endDate) filters.endDate = new Date(endDate);
      
      const performance = await this.dashboardService.getCommercialPerformance(
        userId,
        Object.keys(filters).length > 0 ? filters : undefined
      );
      return {
        success: true,
        data: performance,
        message: 'Performance commerciale r√©cup√©r√©e avec succ√®s'
      };
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de la performance commerciale:', error);
      return {
        success: false,
        data: null,
        message: 'Erreur lors de la r√©cup√©ration de la performance'
      };
    }
  }
}
